# This is a basic workflow to help you get started with Actions

name: Issue data pusher

# Controls when the workflow will run
  # Triggers the workflow when issue is opened
on:
  issues:
    types: [opened]
    max-parallel: 1

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  consecutiveness:
    runs-on: ubuntu-latest
    steps:
      - uses: mktcode/consecutive-workflow-action@v1
        with:
          token: ${{ secrets.GH_TOKEN }}


  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [ consecutiveness ]
    
    steps:
        
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: remove changes
        run: git reset -- data.json
      - name: remove data changes
        run: git reset --hard
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          
      - name: remove changes
        run: git reset -- data.json
      - name: remove data changes
        run: git reset --hard
        
      - name: Update name in data.json
        run: echo "`jq '.data[0].name |= . + "${{ github.event.issue.title }}"' data.json`" > data.json
      - name: Update message in data.json
        run: echo "`jq '.data[1].message |= . + "${{ github.event.issue.body }}"' data.json`" > data.json
      - name: Close issue
        run: echo "github.event.issue.close"
      - name: read data.json
        run: cat data.json
    
      - name: pull
        run: git pull
        continue-on-error: true
      - name: Commit
        uses: EndBug/add-and-commit@v9
        with:
          message: 'updating data'
          add: "data.json --force"
          pathspec_error_handling: ignore
          push: true
        continue-on-error: true
        id: commit
      - name: retry
        continue-on-error: true
        id: retry1
        if: steps.commit.outcome=='failure'         # check the step outcome, retry 1st time
        run: |
          exit 1                                # if it fails again. if it's succeeds, the latter steps will be skipped, and status is successful.
      - name: retry 2
        continue-on-error: true
        id: retry2
        if: steps.commit.outcome=='failure'   # check the step outcome, retry 2nd time
        run: |
          echo retry 2nd time
          exit 1    
      - name: remove changes
        run: git reset -- data.json
      - name: remove data changes
        run: git reset --hard

        
